(()=>{"use strict";var e,t,r={370:(e,t,r)=>{r(177);const n=document.querySelector(".main-container"),o=new class{constructor(){this.cards={}}loadState(){localStorage.getItem("cards")&&(this.cards=JSON.parse(localStorage.getItem("cards")))}showCards(e){if(this.cards){for(const t in this.cards){const r=e.querySelector(`.${t}`).querySelector(".cards");this.cards[t].forEach((e=>{const t=document.createElement("div");t.classList.add("card"),t.innerText=e,r.appendChild(t)}))}localStorage.clear(),this.cards={}}}saveState(e){this.cards={todo:[],"in-progress":[],done:[]};for(const t in this.cards)e.querySelector(`.${t}`).querySelectorAll(".card").forEach((e=>this.cards[t].push(e.innerText)));localStorage.setItem("cards",JSON.stringify(this.cards)),this.cards={}}},a=new class{constructor(e){this.addCardBtns=e.querySelectorAll(".add-card-btn"),this.addNewCardCancelBtns=e.querySelectorAll(".add-new-card-cancel-btn"),this.addNewCardBtns=e.querySelectorAll(".add-new-card-btn"),this.cardRemoveBtn=document.createElement("div"),this.cardRemoveBtn.classList.add("card-remove-btn"),this.cardRemoveBtn.textContent="âœ•"}removeCard(e){e.closest(".card").remove()}hideAddCardBtn(e){e.classList.add("hidden"),e.closest(".column").querySelector(".add-card-container").classList.toggle("hidden")}hideAddCardContainer(e){e.closest(".add-card-container").classList.toggle("hidden"),e.closest(".column").querySelector(".add-card-btn").classList.toggle("hidden");const t=e.closest(".add-card-container").querySelector(".add-card-input");t.value="",t.classList.contains("red-border")&&t.classList.remove("red-border")}addNewCard(e){const t=e.closest(".add-card-container").querySelector(".add-card-input");if(t.value){const r=document.createElement("div");r.classList.add("card"),r.textContent=t.value,e.closest(".column").querySelector(".cards").appendChild(r),t.value="",e.closest(".add-card-container").classList.toggle("hidden"),e.closest(".column").querySelector(".add-card-btn").classList.toggle("hidden")}else t.classList.add("red-border")}showCardRemoveBtn(e){e.classList.contains("card")?(e.appendChild(this.cardRemoveBtn),this.cardRemoveBtn.classList.add("active")):e.classList.contains("card-remove-btn")||this.cardRemoveBtn.classList.remove("active")}}(n),i=new class{constructor(){this.actualElement=void 0,this.shiftX=void 0,this.shiftY=void 0,this.emptyPlace=void 0}moveAt(e,t){this.actualElement.style.left=e-this.shiftX+"px",this.actualElement.style.top=t-this.shiftY+"px"}moveCard(e){this.moveAt(e.pageX,e.pageY),this.actualElement.hidden=!0;const t=document.elementFromPoint(e.clientX,e.clientY);if(this.actualElement.hidden=!1,t.classList.contains("card")){const e=t.getBoundingClientRect(),r=this.actualElement.getBoundingClientRect(),n=e.bottom-(e.bottom-e.top)/2;r.bottom-(r.bottom-r.top)/2<n?t.before(this.emptyPlace):t.after(this.emptyPlace)}else t.classList.contains("add-card-btn")&&0===t.closest(".column").querySelector(".cards").children.length&&t.closest(".column").querySelector(".cards").appendChild(this.emptyPlace)}dropCard(){this.actualElement.classList.remove("selected"),this.actualElement.style.removeProperty("top"),this.actualElement.style.removeProperty("left"),this.actualElement.querySelector(".card-remove-btn").classList.toggle("active"),this.emptyPlace.closest(".cards").insertBefore(this.actualElement,this.emptyPlace),this.emptyPlace.remove(),this.actualElement=void 0,this.shiftX=void 0,this.shiftY=void 0,this.emptyPlace=void 0}selectCard(e){e.preventDefault(),this.actualElement=e.target,this.actualElement.classList.add("selected"),this.actualElement.querySelector(".card-remove-btn").classList.toggle("active"),this.emptyPlace=document.createElement("div"),this.emptyPlace.classList.add("place"),this.emptyPlace.style.height=`${this.actualElement.getBoundingClientRect().height}px`,this.emptyPlace.style.width=`${this.actualElement.getBoundingClientRect().width}px`,this.actualElement.nextSibling?this.actualElement.nextSibling.before(this.emptyPlace):this.actualElement.closest(".cards").appendChild(this.emptyPlace),this.shiftX=e.clientX-this.actualElement.getBoundingClientRect().left,this.shiftY=e.clientY-this.actualElement.getBoundingClientRect().top,this.moveAt(e.pageX,e.pageY)}};window.addEventListener("unload",(()=>{o.saveState(n)})),window.addEventListener("load",(()=>{o.loadState(),o.showCards(n)})),n.addEventListener("mouseover",(e=>{a.showCardRemoveBtn(e.target)})),a.cardRemoveBtn.addEventListener("click",(e=>{a.removeCard(e.target)})),a.addCardBtns.forEach((e=>{e.addEventListener("click",(e=>{a.hideAddCardBtn(e.target)}))})),a.addNewCardCancelBtns.forEach((e=>{e.addEventListener("click",(e=>{a.hideAddCardContainer(e.target)}))})),a.addNewCardBtns.forEach((e=>{e.addEventListener("click",(e=>{a.addNewCard(e.target)}))}));const c=e=>{i.moveCard(e)},d=()=>{i.dropCard(),document.removeEventListener("mouseup",d),document.removeEventListener("mousemove",c)};n.addEventListener("mousedown",(e=>{e.target.classList.contains("card")&&(i.selectCard(e),document.addEventListener("mouseup",d),document.addEventListener("mousemove",c))}))},783:(e,t,r)=>{var n=r(618),o=Object.create(null),a="undefined"==typeof document,i=Array.prototype.forEach;function c(){}function d(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function s(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(a)return console.log("no window.document found, will not HMR CSS"),c;var r,u,h=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),a=r[r.length-1];a&&(t=a.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(d(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return r.apply(e,t)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},n={};function o(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var a=n[e]={id:e,exports:{}};try{var i={id:e,module:a,factory:r[e],require:o};o.i.forEach((function(e){e(i)})),a=i.module,i.factory.call(a.exports,a,a.exports,i.require)}catch(e){throw a.error=e,e}return a.exports}o.m=r,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"8e62923620618ab404ea",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ahj-dnd:",o.l=(r,n,a,i)=>{if(e[r])e[r].push(n);else{var c,d;if(void 0!==a)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var u=s[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+a){c=u;break}}c||(d=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",t+a),c.src=r),e[r]=[n];var h=(t,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=h.bind(null,c.onerror),c.onload=h.bind(null,c.onload),d&&document.head.appendChild(c)}},(()=>{var e,t,r,n={},a=o.c,i=[],c=[],d="idle",s=0,l=[];function u(e){d=e;for(var t=[],r=0;r<c.length;r++)t[r]=c[r].call(null,e);return Promise.all(t)}function h(){0==--s&&u("ready").then((function(){if(0===s){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,a){return o.hmrC[a](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===s?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var a=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var i,c=u("apply"),d=function(e){i||(i=e)},s=[];return n.forEach((function(e){if(e.apply){var t=e.apply(d);if(t)for(var r=0;r<t.length;r++)s.push(t[r])}})),Promise.all([a,c]).then((function(){return i?u("fail").then((function(){throw i})):r?m(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return s}))}))}function v(){if(r)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,t)}))})),r=void 0,!0}o.hmrD=n,o.i.push((function(l){var m,v,g,y,E=l.module,b=function(t,r){var n=a[r];if(!n)return t;var o=function(o){if(n.hot.active){if(a[o]){var c=a[o].parents;-1===c.indexOf(r)&&c.push(r)}else i=[r],e=o;-1===n.children.indexOf(o)&&n.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return t(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(o,l,c(l));return o.e=function(e){return function(e){switch(d){case"ready":u("prepare");case"prepare":return s++,e.then(h,h),e;default:return e}}(t.e(e))},o}(l.require,l.id);E.hot=(m=l.id,v=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){i=v.parents.slice(),e=g?void 0:m,o(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:n[m]},e=void 0,y),E.parents=i,E.children=[],i=[],l.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],r=r=>({dispose:()=>{for(var t=0;t<e.length;t++){var r=e[t];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});o.hmrC.miniCss=(n,a,i,c,d,s)=>{d.push(r),n.forEach((r=>{var n=o.miniCssF(r),a=o.p+n,i=((e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var a=document.getElementsByTagName("style");for(n=0;n<a.length;n++){var i;if((o=(i=a[n]).getAttribute("data-href"))===e||o===t)return i}})(n,a);i&&c.push(new Promise(((n,o)=>{var c=((e,t,r,n,o)=>{var a=document.createElement("link");return a.rel="stylesheet",a.type="text/css",a.onerror=a.onload=r=>{if(a.onerror=a.onload=null,"load"===r.type)n();else{var i=r&&("load"===r.type?"missing":r.type),c=r&&r.target&&r.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=i,d.request=c,a.parentNode&&a.parentNode.removeChild(a),o(d)}},a.href=t,r?r.parentNode.insertBefore(a,r.nextSibling):document.head.appendChild(a),a})(r,a,i,(()=>{c.as="style",c.rel="preload",n()}),o);e.push(i),t.push(c)})))}))}}})(),(()=>{var e,t,r,n,a,i=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},c={};function d(t,r){return e=r,new Promise(((e,r)=>{c[t]=e;var n=o.p+o.hu(t),a=new Error;o.l(n,(e=>{if(c[t]){c[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;a.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",a.name="ChunkLoadError",a.type=n,a.request=o,r(a)}}))}))}function s(e){function c(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var a=n.pop(),i=a.id,c=a.chain,s=o.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],h=o.c[u];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[i]?(r[u]||(r[u]=[]),d(r[u],[i])):(delete r[u],t.push(u),n.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,t=void 0;var s={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var f,m=r[p],v=!1,g=!1,y=!1,E="";switch((f=m?c(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in u[p]=m,d(l,f.outdatedModules),f.outdatedDependencies)o.o(f.outdatedDependencies,p)&&(s[p]||(s[p]=[]),d(s[p],f.outdatedDependencies[p]));y&&(d(l,[f.moduleId]),u[p]=h)}r=void 0;for(var b,w=[],C=0;C<l.length;C++){var S=l[C],L=o.c[S];L&&(L.hot._selfAccepted||L.hot._main)&&u[S]!==h&&!L.hot._selfInvalidated&&w.push({module:S,require:L.hot._requireSelf,errorHandler:L.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var a=r.pop(),c=o.c[a];if(c){var d={},u=c.hot._disposeHandlers;for(C=0;C<u.length;C++)u[C].call(null,d);for(o.hmrD[a]=d,c.hot.active=!1,delete o.c[a],delete s[a],C=0;C<c.children.length;C++){var h=o.c[c.children[C]];h&&(e=h.parents.indexOf(a))>=0&&h.parents.splice(e,1)}}}for(var p in s)if(o.o(s,p)&&(c=o.c[p]))for(b=s[p],C=0;C<b.length;C++)t=b[C],(e=c.children.indexOf(t))>=0&&c.children.splice(e,1)},apply:function(t){for(var r in u)o.o(u,r)&&(o.m[r]=u[r]);for(var n=0;n<a.length;n++)a[n](o);for(var i in s)if(o.o(s,i)){var c=o.c[i];if(c){b=s[i];for(var d=[],h=[],p=[],f=0;f<b.length;f++){var m=b[f],v=c.hot._acceptedDependencies[m],g=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==d.indexOf(v))continue;d.push(v),h.push(g),p.push(m)}}for(var y=0;y<d.length;y++)try{d[y].call(null,b)}catch(r){if("function"==typeof h[y])try{h[y](r,{moduleId:i,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:r}),e.ignoreErrored||t(r)}}}for(var E=0;E<w.length;E++){var C=w[E],S=C.module;try{C.require(S)}catch(r){if("function"==typeof C.errorHandler)try{C.errorHandler(r,{moduleId:S,module:o.c[S]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:S,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdateahj_dnd=(t,n,i)=>{for(var d in n)o.o(n,d)&&(r[d]=n[d],e&&e.push(d));i&&a.push(i),c[t]&&(c[t](),c[t]=void 0)},o.hmrI.jsonp=function(e,t){r||(r={},a=[],n=[],t.push(s)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,c,l,u,h,p){h.push(s),t={},n=c,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),a=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(u.push(d(e,p)),t[e]=!0):t[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){t&&o.o(t,e)&&!t[e]&&(r.push(d(e)),t[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(370)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,